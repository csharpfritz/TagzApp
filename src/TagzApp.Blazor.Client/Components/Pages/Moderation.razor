@page "/Moderation"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@attribute [Authorize(policy: "Moderator")]
@implements IAsyncDisposable
@implements IHasSignalRConnection
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using TagzApp.ViewModels.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Message Moderation</PageTitle>

<div class="row">
	<div class="col-md-12">
		<h1 class="text-center">Moderate Content for TagzApp (@_Tag)</h1>
	</div>
</div>

<div class="row" style="padding: 0  10px!important;">
	<div class="col-md-6 d-flex align-items-center" style="">
		<span class="col-form-label-sm">Current Moderators:</span>
		<span class="currentModerators">
			@foreach (var moderator in _Moderators)
			{
				<img id="moderator-@moderator.Email"
						 title="@moderator.DisplayName"
						 src="@moderator.AvatarImageSource" />
			}
		</span>
	</div>

	<div class="col-md-6 d-flex justify-content-end align-items-center">

		@* TODO: Add a badge with a number of currently blocked users *@
		<a class="link-danger me-3" title="Blocked Users" href="/BlockedUsers">
			<span id="blockedCount">
				@BlockedUserCount
			</span> <i class="bi bi-x-circle-fill"></i>
		</a>

		<label for="approved" style="text-wrap: nowrap; margin-right: 1.4em">Approval Status:</label>
		<select id="approved" @bind="FilterApprovalStatus">
			<option value="@FilterModerationState.All">All</option>
			<option value="@FilterModerationState.Approved">Approved Only</option>
			<option value="@FilterModerationState.Rejected">Rejected Only</option>
			<option value="@FilterModerationState.Pending">Needs Review</option>
		</select>

		<label for="providers" class="px-2">Providers:</label>
		<div class="btn-group" role="group">

			@foreach (var provider in _Providers.OrderBy(p => p.Name))
			{
				<input type="checkbox" class="btn-check" name="options" id="@provider.Id" checked autocomplete="off">
				<label title="@provider.Name" 
					class="btn btn-outline-primary providerSwitch" 
					@onclick="() => ToggleProviderFilter(provider.Id)"
					for="@provider.Id"><i class="provider bi @ContentModel.MapProviderToIcon(provider.Id)"></i></label>
			}

		</div>

	</div>

</div>
<div class="row" style="padding: 2px 10px!important">

	@if (_Content.Any())
	{
		<div id="taggedContent" style="position:absolute; left: 0;height: calc(100vh - 210px)">


			<CascadingValue Value="this">
				@foreach (var content in _Content.Values.Reverse())
				{
					<ModerationMessage @key="content" Content="content" />
				}
			</CascadingValue>

		</div>

	}
	else if (_Loading)
	{
		<div class=" d-flex justify-content-center align-items-center" style="height: calc(100vh - 210px); text-align: center;">
			<div class="spinner-border" role="status"> <span class="visually-hidden">Loading...</span> </div>
		</div>
	} else {
		<div class=" d-flex justify-content-center align-items-center" style="height: calc(100vh - 210px); text-align: center;">
			<div class="alert alert-danger" role="status"> No messages found that meet the filter criteria</div>
		</div>
	}

	<PauseButton @ref="ThePauseButton" OnPauseUpdates="OnPauseClick" />

</div>

<CascadingValue Value="this">
	<MessageDetails @ref="MessageDetailsDialog" Model="SelectedContent" />

	<MessageQueueDrawer />

</CascadingValue>


